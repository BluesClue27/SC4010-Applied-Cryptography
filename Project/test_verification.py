# import gcd 

p =  97265600816106224559763072402025688292091973120936095896218716512675019999441617557090166770240588393677878382177922146367563883858268363550092440013830566658848539621475480201816465588156404361642516776878674756862374756577538030010747736084405244746328029003142084509265204527763340046701326701998792020337
q =  97265600816106224559763072402025688292091973120936095896218716512675019999441617557090166770240588393677878382177922146367563883858268363550092440013830566658848539621475480201816465588156404361642516776878674756862374756577538030010747736084405244746328029003142084509265204527763340046701326701998792020277
n =  9460597102118123857109551955243370592932888112659275111096133928163922173956061568227839079133969919950542203213554044916243112263082146506559059160529082371876817073643874400312386368104798537620880035062307030447133134651389833684648401122512950589777505033776611389658326290301849112474352907537043954953799257303177189118352364955747590367768172328230269588563102830207887032899848351046392877535327242790519512752696848989321699968845207211575631208970436723861328435448324854866684359919478685484356434110973219379974556077253751318791460437413524171133351836888979063581216187965659055415652134242938700373349
phi_n =  9460597102118123857109551955243370592932888112659275111096133928163922173956061568227839079133969919950542203213554044916243112263082146506559059160529082371876817073643874400312386368104798537620880035062307030447133134651389833684648401122512950589777505033776611389658326290301849112474352907537043954953604726101544976669232838810943538991183988381988397396770665397182536992900965115932212543994846066003163755988341004696586572201128670484475446328942775590543631356205373894463051428743165876761071400557215869866249806564098675258769964965244713681640695778882694894562685778910132375322249480838941116332736
e =  2220313622805595969160470116540837698193061759292608462462302986737826804947267797897056512287983729726153579948481100523914912968089137586098305163653496978978383883495393922468366267647482920978745038368171257672065304654057993451515126707176302112857072657499326996535173138112266197790682812064153885622101322141396603885193983624190202015224208470355874233946797783330554552301547369712949750469647061739951972478004453821074370659138815833301012123112598320072830612459750837962768127775142860206182120369705540408301887435266619079476923887114056413576089446606215984768827772694850943808620733015380991249219
d =  63698453408524402079555738089562075212893506830894245562491752266315200686763

print(f"p.bit_length(): {p.bit_length()}")
print(f"q.bit_length(): {q.bit_length()}")
print(f"difference of p-q: {p-q}")
print(f"e.bit_length(): {e.bit_length()}")
print(f"d.bit_length(): {d.bit_length()}")
print(f"difference of e-d: {e-d}")
print()

# Calculate fourth root using integer arithmetic (Newton's method)
def integer_fourth_root(n):
    """Calculate integer fourth root using Newton's method"""
    if n == 0:
        return 0
    
    # Initial guess using bit length
    x = 1 << ((n.bit_length() + 3) // 4)  # Approximate starting point
    
    while True:
        # Newton's method: x_new = (3*x + n/x^3) / 4
        x_cubed = x ** 3
        x_new = (3 * x + n // x_cubed) // 4
        if x_new >= x:
            return x
        x = x_new

fourth_root_n = integer_fourth_root(n)
wiener_attack_threshold = fourth_root_n // 3

print(f"Fourth root of n: {fourth_root_n}")
print(f"Fourth root bit length: {fourth_root_n.bit_length()}")
print(f"Wiener attack threshold (n^(1/4) / 3): {wiener_attack_threshold}")
print(f"Threshold bit length: {wiener_attack_threshold.bit_length()}")
print()

wiener_value = wiener_attack_threshold - d
print(f"d value: {d}")
print(f"Wiener threshold: {wiener_attack_threshold}")
print(f"wiener_threshold - d: {wiener_value}")
print(f"Is d < threshold (vulnerable)? {d < wiener_attack_threshold}")
print()

print(f"Verification (e * d) mod phi_n (should be 1): {(e * d) % phi_n}")